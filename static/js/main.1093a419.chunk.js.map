{"version":3,"sources":["components/TransactionHistory/TransactionHistory.module.css","components/Balance/Balance.module.css","components/transactionAlert.js","components/Controls/Controls.js","components/Balance/Balance.js","components/TransactionHistory/TransactionHistory.js","components/Dashboard/Dashboard.js","components/App.js","index.js","components/Dashboard/Dashboard.module.css","components/Controls/Controls.module.css"],"names":["module","exports","history","balance","summHistory","transactionAlert","incorrectValue","noMoney","success","Controls","_ref","hendleGetValue","hendleDeposits","hendleWithdrow","inputValue","react_default","a","createElement","className","styles","controls","input","type","name","onChange","e","placeholder","value","onClick","Balance","summDeposits","summWithdrow","role","aria-label","TransactionHistory","transactions","map","el","key","id","date","stateSum","items","depositsSumm","filter","reduce","acc","withdrowSumm","deposits","withdrow","Dashboard","state","_this","setState","target","numberValue","Number","createObj","shortid","generate","Date","toLocaleString","concat","Object","toConsumableArray","resetInput","toast","error","_this$state","localStorage","getItem","this","JSON","parse","prevProps","prevState","setItem","stringify","_this$state2","deshboard","components_Controls_Controls","components_Balance_Balance","components_TransactionHistory_TransactionHistory","react_toastify","closeButton","Component","App","Fragment","components_Dashboard_Dashboard","ReactDOM","render","components_App","document","getElementById","dashboards"],"mappings":"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","file":"static/js/main.1093a419.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"history\":\"TransactionHistory_history__18I2Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"balance\":\"Balance_balance__1I9yA\",\"summHistory\":\"Balance_summHistory__2o6Hj\"};","const transactionAlert = {\n  incorrectValue: 'Введите сумму для проведения операции!',\n  noMoney: 'На счету недостаточно средств для проведения операции!',\n  success: 'Операция произведена успешно!',\n};\n\nexport default transactionAlert;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Controls.module.css';\n\nconst Controls = ({\n  hendleGetValue,\n  hendleDeposits,\n  hendleWithdrow,\n  inputValue,\n}) => {\n  return (\n    <section className={styles.controls}>\n      <input\n        className={styles.input}\n        type=\"number\"\n        name=\"value\"\n        onChange={e => hendleGetValue(e)}\n        placeholder=\"0\"\n        value={inputValue}\n      />\n      <button type=\"button\" onClick={hendleDeposits}>\n        Deposit\n      </button>\n      <button type=\"button\" onClick={hendleWithdrow}>\n        Withdraw\n      </button>\n    </section>\n  );\n};\n\nControls.propTypes = {\n  hendleGetValue: PropTypes.func.isRequired,\n  hendleDeposits: PropTypes.func.isRequired,\n  hendleWithdrow: PropTypes.func.isRequired,\n  inputValue: PropTypes.string.isRequired,\n};\nexport default Controls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Balance.module.css';\n\nconst Balance = ({ balance, summDeposits, summWithdrow }) => (\n  <section className={styles.balance}>\n    <span className={styles.summHistory} role=\"img\" aria-label=\"arrow-up\">\n      ⬆️ {summDeposits} $\n    </span>\n    <span className={styles.summHistory} role=\"img\" aria-label=\"arrow-down\">\n      ⬇️ {summWithdrow} $\n    </span>\n    <span className={styles.summHistory}> Balance: {balance} $</span>\n  </section>\n);\n\nBalance.propTypes = {\n  balance: PropTypes.number.isRequired,\n  summDeposits: PropTypes.number.isRequired,\n  summWithdrow: PropTypes.number.isRequired,\n};\n\nexport default Balance;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './TransactionHistory.module.css';\n\nconst TransactionHistory = ({ transactions }) => {\n  return (\n    <table className={styles.history}>\n      <thead>\n        <tr>\n          <th>Transaction</th>\n          <th>Amount</th>\n          <th>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        {transactions.map(el => (\n          <tr key={el.id}>\n            <td>{el.type}</td>\n            <td>{el.inputValue}$</td>\n            <td>{el.date}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nTransactionHistory.propTypes = {\n  transactions: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      inputValue: PropTypes.number.isRequired,\n      date: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n\nexport default TransactionHistory;\n","/*eslint-disable*/\nimport React, { Component } from 'react';\nimport shortid from 'shortid';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ToastContainer, toast } from 'react-toastify';\nimport transactionAlert from '../transactionAlert';\nimport Controls from '../Controls/Controls';\nimport Balance from '../Balance/Balance';\nimport TansactionHistory from '../TransactionHistory/TransactionHistory';\nimport styles from './Dashboard.module.css';\n\nconst stateSum = items => {\n  const depositsArr = items.filter(el => el.type === 'Deposits');\n  const depositsSumm = depositsArr.reduce(\n    (acc, el) => (acc += el.inputValue),\n    0,\n  );\n  const withdrowArr = items.filter(el => el.type === 'Withdrow');\n  const withdrowSumm = withdrowArr.reduce(\n    (acc, el) => (acc += el.inputValue),\n    0,\n  );\n  const newBalance = depositsSumm - withdrowSumm;\n\n  const stateObj = {\n    balance: newBalance,\n    deposits: depositsSumm,\n    withdrow: withdrowSumm,\n  };\n  return stateObj;\n};\n\nclass Dashboard extends Component {\n  state = {\n    inputValue: '',\n    transactions: [],\n    balance: 0,\n    deposits: 0,\n    withdrow: 0,\n  };\n\n  componentDidMount() {\n    if (localStorage.getItem('transactions')) {\n      const transactions = localStorage.getItem('transactions');\n      this.setState({\n        transactions: JSON.parse(transactions),\n        balance: stateSum(JSON.parse(transactions)).balance,\n        deposits: stateSum(JSON.parse(transactions)).deposits,\n        withdrow: stateSum(JSON.parse(transactions)).withdrow,\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { transactions } = this.state;\n    if (prevState.transactions !== transactions) {\n      this.setState({\n        balance: stateSum(transactions).balance,\n        deposits: stateSum(transactions).deposits,\n        withdrow: stateSum(transactions).withdrow,\n      });\n      localStorage.setItem('transactions', JSON.stringify(transactions));\n    }\n  }\n\n  hendleGetValue = e => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  hendleDeposits = () => {\n    const { inputValue } = this.state;\n    const numberValue = Number(inputValue);\n    if (numberValue > 0) {\n      const createObj = {\n        id: shortid.generate(),\n        date: new Date().toLocaleString(),\n        inputValue: numberValue,\n        type: 'Deposits',\n      };\n      this.setState(state => ({\n        transactions: [...state.transactions, createObj],\n      }));\n      this.resetInput();\n      toast.success(transactionAlert.success);\n    } else {\n      toast.error(transactionAlert.incorrectValue);\n    }\n  };\n\n  hendleWithdrow = () => {\n    const { inputValue, balance } = this.state;\n    const numberValue = Number(inputValue);\n    if (numberValue <= 0) {\n      toast.error(transactionAlert.incorrectValue);\n    } else if (balance >= numberValue) {\n      const createObj = {\n        id: shortid.generate(),\n        date: new Date().toLocaleString(),\n        inputValue: numberValue,\n        type: 'Withdrow',\n      };\n      this.setState(state => ({\n        transactions: [...state.transactions, createObj],\n      }));\n      this.resetInput();\n      toast.success(transactionAlert.success);\n    } else {\n      toast.error(transactionAlert.noMoney);\n    }\n  };\n\n  resetInput = () => {\n    this.setState({\n      inputValue: '',\n    });\n  };\n\n  render() {\n    const {\n      balance,\n      withdrow,\n      deposits,\n      transactions,\n      inputValue,\n    } = this.state;\n    return (\n      <div className={styles.deshboard}>\n        <Controls\n          inputValue={inputValue}\n          hendleGetValue={this.hendleGetValue}\n          hendleDeposits={this.hendleDeposits}\n          hendleWithdrow={this.hendleWithdrow}\n        />\n        <Balance\n          className={styles.controls}\n          balance={balance}\n          summDeposits={deposits}\n          summWithdrow={withdrow}\n        />\n        <TansactionHistory\n          className={styles.transactions}\n          transactions={transactions}\n        />\n        <ToastContainer closeButton={false} />\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport Dashboard from './Dashboard/Dashboard';\n\nconst App = () => (\n  <>\n    <Dashboard />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboards\":\"Dashboard_dashboards__fYIUu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__1dbaL\"};"],"sourceRoot":""}